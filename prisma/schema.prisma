generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ───────────────────────── USER & AUTH ─────────────────────────
 */

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  passwordHash  String?

  // relations
  accounts   Account[]
  sessions   Session[]
  tasks      Task[]
  categories Category[]
  routines   Routine[]

    payments  Payment[]      // relation ↔ Payment.user

}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text
  expires_at        Int?
  scope             String?
  id_token          String? @db.Text
  token_type        String?
  refresh_token     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ──────────────────────── TASK & CATEGORY ───────────────────────
 */

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime
  urgency     Int      @default(0) // 0-3
  status      String   @default("incompleted")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  /**
   * relations
   */
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  icon  String
  color String

  /**
   * relations
   */
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[]

  @@unique([userId, name])
}

/**
 * ───────────────────────── ROUTINE ─────────────────────────
 */

model Routine {
  id          Int      @id @default(autoincrement())
  title       String
  weekdays    Int[]
  startAt     DateTime
  durationSec Int
  progressSec Int      @default(0)
  finished    Boolean  @default(false)

  /* ↓↓↓ ต้องมีสอง decorator พร้อมกันแบบนี้ ↓↓↓ */
  updatedAt   DateTime @default(now()) @updatedAt

  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  RoutineLog  RoutineLog[]
}


model RoutineLog {
  id        Int      @id @default(autoincrement())
  date      DateTime // วันที่ทำจริง
  doneSec   Int
  createdAt DateTime @default(now())

  routineId Int
  routine   Routine @relation(fields: [routineId], references: [id], onDelete: Cascade)
}


/// ───── enum ใหม่ ─────
enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

/// ───── model ใหม่ ─────
model Payment {
  id              Int           @id @default(autoincrement())
  stripeSessionId String        @unique      // id จาก Stripe
  amount          Int
  currency        String
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  /// relation
  userId Int
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}
